<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSV Compatibility Fixer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }

        .file-section {
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 6px;
            border: 2px dashed #dee2e6;
        }

        .file-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .controls {
            margin: 20px 0;
            text-align: center;
        }

        .btn {
            padding: 10px 20px;
            margin: 0 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.2s;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background-color: #0056b3;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover:not(:disabled) {
            background-color: #545b62;
        }

        .btn-success {
            background-color: #28a745;
            color: white;
        }

        .btn-success:hover:not(:disabled) {
            background-color: #1e7e34;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .log-area {
            margin: 20px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-left: 4px solid #007bff;
            font-family: monospace;
            min-height: 100px;
            white-space: pre-wrap;
        }

        .column-fix-area {
            margin-top: 30px;
        }

        .column-card {
            margin-bottom: 30px;
            padding: 20px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            background-color: #fff;
        }

        .column-card.committed-fix {
            border-color: #28a745;
            background-color: #f8fff9;
        }

        .column-card.committed-unchanged {
            border-color: #007bff;
            background-color: #f8f9ff;
        }

        .column-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }

        .column-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }

        .column-status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-pending {
            background-color: #ffc107;
            color: #856404;
        }

        .status-committed-fix {
            background-color: #28a745;
            color: white;
        }

        .status-committed-unchanged {
            background-color: #007bff;
            color: white;
        }

        .fix-controls {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }

        .fix-select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            min-width: 150px;
        }

        .fix-input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            min-width: 150px;
        }

        .preview-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .preview-panel {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            overflow: hidden;
        }

        .preview-header {
            background-color: #f8f9fa;
            padding: 10px;
            font-weight: bold;
            border-bottom: 1px solid #dee2e6;
        }

        .preview-table {
            max-height: 300px;
            overflow-y: auto;
        }

        .preview-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .preview-table th,
        .preview-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
            font-family: monospace;
            font-size: 12px;
        }

        .preview-table th {
            background-color: #f8f9fa;
            position: sticky;
            top: 0;
        }

        .preview-table tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .commit-area {
            text-align: center;
            padding-top: 15px;
            border-top: 1px solid #dee2e6;
        }

        .error-message {
            color: #dc3545;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
        }

        .success-message {
            color: #155724;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            .preview-container {
                grid-template-columns: 1fr;
            }
            
            .fix-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .fix-select,
            .fix-input {
                min-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>CSV Compatibility Fixer</h1>
        <p style="text-align: center; color: #666;">
            Detect and fix CSV data compatibility issues with Excel and Access databases
        </p>

        <div class="file-section">
            <h3>1. Load CSV File</h3>
            <input type="file" id="csvFile" class="file-input" accept=".csv" />
        </div>

        <div class="controls">
            <button id="saveBtn" class="btn btn-success" disabled>Save Cleaned CSV</button>
            <button id="resetBtn" class="btn btn-secondary" disabled>Reset All Fixes</button>
        </div>

        <div id="logArea" class="log-area">
            Ready to load CSV file...
        </div>

        <div id="columnFixArea" class="column-fix-area">
            <!-- Column fix cards will be dynamically generated here -->
        </div>
    </div>

    <script>
        // Global variables
        let originalData = [];
        let flaggedColumns = {};
        let committedFixes = {};
        let columnProblems = {};

        // DOM elements
        const csvFileInput = document.getElementById('csvFile');
        const logArea = document.getElementById('logArea');
        const columnFixArea = document.getElementById('columnFixArea');
        const saveBtn = document.getElementById('saveBtn');
        const resetBtn = document.getElementById('resetBtn');

        // Event listeners
        csvFileInput.addEventListener('change', handleFileLoad);
        saveBtn.addEventListener('click', saveCleanedCSV);
        resetBtn.addEventListener('click', resetAllFixes);

        // CSV parsing function with proper quote handling
        function parseCSV(text) {
            const rows = [];
            let currentRow = [];
            let currentField = '';
            let inQuotes = false;
            let i = 0;

            while (i < text.length) {
                const char = text[i];
                const nextChar = text[i + 1];

                if (char === '"') {
                    if (inQuotes && nextChar === '"') {
                        // Escaped quote
                        currentField += '"';
                        i += 2;
                        continue;
                    } else {
                        // Toggle quote state
                        inQuotes = !inQuotes;
                    }
                } else if (char === ',' && !inQuotes) {
                    // Field separator
                    currentRow.push(currentField);
                    currentField = '';
                } else if ((char === '\n' || char === '\r') && !inQuotes) {
                    // Row separator
                    if (currentField || currentRow.length > 0) {
                        currentRow.push(currentField);
                        rows.push(currentRow);
                        currentRow = [];
                        currentField = '';
                    }
                    // Skip \r\n combinations
                    if (char === '\r' && nextChar === '\n') {
                        i++;
                    }
                } else {
                    currentField += char;
                }
                i++;
            }

            // Add final field and row if they exist
            if (currentField || currentRow.length > 0) {
                currentRow.push(currentField);
                rows.push(currentRow);
            }

            return rows.filter(row => row.length > 0);
        }

        // Problem detection functions
        function hasLongNumber(value) {
            const numStr = String(value).replace(/[^\d.-]/g, '');
            return numStr.length >= 15 && !isNaN(numStr) && numStr !== '';
        }

        function hasLongFloat(value) {
            const str = String(value);
            const decimalIndex = str.indexOf('.');
            if (decimalIndex === -1) return false;
            const decimalPart = str.substring(decimalIndex + 1);
            return decimalPart.length >= 10;
        }

        function isISO8601Date(value) {
            const str = String(value);
            // Match YYYY-MM-DD[T or space]HH:MM:SS with optional milliseconds and timezone
            const iso8601Regex = /^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(\.\d{3})?(Z|[+-]\d{2}:\d{2})?$/;
            return iso8601Regex.test(str);
        }

        // Column scanning function
        function scanColumns(data) {
            const flagged = {};
            const problems = {};

            if (data.length === 0) return { flagged, problems };

            const numColumns = data[0].length;

            for (let col = 0; col < numColumns; col++) {
                const columnProblems = [];
                
                for (let row = 0; row < data.length; row++) {
                    const cellValue = data[row][col];
                    if (cellValue === undefined || cellValue === null || cellValue === '') continue;

                    const issues = [];
                    if (hasLongNumber(cellValue)) issues.push('Long number (15+ digits)');
                    if (hasLongFloat(cellValue)) issues.push('Long float (10+ decimals)');
                    if (isISO8601Date(cellValue)) issues.push('ISO 8601 date format');

                    if (issues.length > 0) {
                        columnProblems.push({
                            rowIndex: row,
                            value: cellValue,
                            issues: issues
                        });
                    }
                }

                if (columnProblems.length > 0) {
                    flagged[col] = true;
                    problems[col] = columnProblems;
                }
            }

            return { flagged, problems };
        }

        // Fix application functions
        function applyFix(value, fixType, customValue = '') {
            const str = String(value);
            
            switch (fixType) {
                case 'quote':
                    return `"${str}"`;
                case 'prefix':
                    return customValue + str;
                case 'suffix':
                    return str + customValue;
                case 'truncate':
                    return str.substring(0, 15);
                case 'roundExcel':
                    if (!isNaN(value) && String(value).length > 15) {
                        const num = parseFloat(value);
                        const strNum = String(num);
                        if (strNum.length > 15) {
                            const precision = Math.max(0, 15 - String(Math.floor(Math.abs(num))).length - 1);
                            return num.toFixed(precision);
                        }
                    }
                    return str;
                case 'isoCleanup':
                    return str.replace(/T/g, ' ').replace(/\.\d{3}/g, '').replace(/Z|[+-]\d{2}:\d{2}$/g, '');
                case 'unchanged':
                default:
                    return str;
            }
        }

        // File loading handler
        function handleFileLoad(event) {
            const file = event.target.files[0];
            if (!file) return;

            if (!file.name.toLowerCase().endsWith('.csv')) {
                logArea.textContent = 'Error: Please select a CSV file.';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    logArea.textContent = 'Parsing CSV file...';
                    originalData = parseCSV(e.target.result);
                    
                    if (originalData.length === 0) {
                        logArea.textContent = 'Error: CSV file appears to be empty.';
                        return;
                    }

                    logArea.textContent = `Loaded ${originalData.length} rows with ${originalData[0].length} columns.\nScanning for compatibility issues...`;
                    
                    const scanResult = scanColumns(originalData);
                    flaggedColumns = scanResult.flagged;
                    columnProblems = scanResult.problems;

                    const flaggedCount = Object.keys(flaggedColumns).length;
                    
                    if (flaggedCount === 0) {
                        logArea.textContent += '\n\nNo compatibility issues found! Your CSV file is ready for Excel and Access.';
                        columnFixArea.innerHTML = '';
                    } else {
                        logArea.textContent += `\n\nFound compatibility issues in ${flaggedCount} column(s):`;
                        Object.keys(flaggedColumns).forEach(col => {
                            const problemCount = columnProblems[col].length;
                            const columnName = originalData.length > 0 ? `Column ${parseInt(col) + 1}` : `Column ${parseInt(col) + 1}`;
                            logArea.textContent += `\n- ${columnName}: ${problemCount} problematic cells`;
                        });
                        
                        renderColumnFixInterface();
                    }

                    // Reset state
                    committedFixes = {};
                    updateButtonStates();

                } catch (error) {
                    logArea.textContent = `Error parsing CSV file: ${error.message}`;
                    console.error('CSV parsing error:', error);
                }
            };

            reader.onerror = function() {
                logArea.textContent = 'Error reading file.';
            };

            reader.readAsText(file);
        }

        // Render column fix interface
        function renderColumnFixInterface() {
            columnFixArea.innerHTML = '';

            Object.keys(flaggedColumns).forEach(colIndex => {
                const col = parseInt(colIndex);
                const columnCard = createColumnCard(col);
                columnFixArea.appendChild(columnCard);
            });
        }

        // Create column card
        function createColumnCard(columnIndex) {
            const card = document.createElement('div');
            card.className = 'column-card';
            card.id = `column-card-${columnIndex}`;

            const problems = columnProblems[columnIndex];
            const sampleProblems = problems.slice(0, 100); // Limit to 100 samples

            card.innerHTML = `
                <div class="column-header">
                    <div class="column-title">Column ${columnIndex + 1}</div>
                    <div class="column-status status-pending">Pending Fix</div>
                </div>

                <div class="fix-controls">
                    <select class="fix-select" id="fix-select-${columnIndex}">
                        <option value="">Choose a fix...</option>
                        <option value="quote">Quote as Text</option>
                        <option value="prefix">Add Prefix</option>
                        <option value="suffix">Add Suffix</option>
                        <option value="truncate">Truncate to 15 characters</option>
                        <option value="roundExcel">Round to Fit Excel</option>
                        <option value="isoCleanup">ISO Cleanup</option>
                        <option value="unchanged">Leave Unchanged</option>
                    </select>
                    <input type="text" class="fix-input hidden" id="fix-input-${columnIndex}" placeholder="Enter custom text...">
                    <button class="btn btn-primary" id="commit-btn-${columnIndex}" disabled>Commit Fix</button>
                </div>

                <div class="preview-container">
                    <div class="preview-panel">
                        <div class="preview-header">Original Values (${sampleProblems.length} samples)</div>
                        <div class="preview-table" id="original-preview-${columnIndex}">
                            <table>
                                <thead>
                                    <tr><th>Row</th><th>Value</th><th>Issues</th></tr>
                                </thead>
                                <tbody>
                                    ${sampleProblems.map(problem => `
                                        <tr>
                                            <td>${problem.rowIndex + 1}</td>
                                            <td>${escapeHtml(problem.value)}</td>
                                            <td>${problem.issues.join(', ')}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="preview-panel">
                        <div class="preview-header">Preview Values</div>
                        <div class="preview-table" id="preview-${columnIndex}">
                            <table>
                                <thead>
                                    <tr><th>Row</th><th>Fixed Value</th></tr>
                                </thead>
                                <tbody id="preview-body-${columnIndex}">
                                    <tr><td colspan="2" style="text-align: center; color: #666;">Select a fix option to see preview</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="commit-area">
                    <div id="fix-status-${columnIndex}"></div>
                </div>
            `;

            // Add event listeners
            const fixSelect = card.querySelector(`#fix-select-${columnIndex}`);
            const fixInput = card.querySelector(`#fix-input-${columnIndex}`);
            const commitBtn = card.querySelector(`#commit-btn-${columnIndex}`);

            fixSelect.addEventListener('change', () => handleFixSelection(columnIndex));
            fixInput.addEventListener('input', () => updatePreview(columnIndex));
            commitBtn.addEventListener('click', () => commitFix(columnIndex));

            return card;
        }

        // Handle fix selection
        function handleFixSelection(columnIndex) {
            const fixSelect = document.getElementById(`fix-select-${columnIndex}`);
            const fixInput = document.getElementById(`fix-input-${columnIndex}`);
            const commitBtn = document.getElementById(`commit-btn-${columnIndex}`);

            const selectedFix = fixSelect.value;

            // Show/hide custom input based on fix type
            if (selectedFix === 'prefix' || selectedFix === 'suffix') {
                fixInput.classList.remove('hidden');
                fixInput.required = true;
            } else {
                fixInput.classList.add('hidden');
                fixInput.required = false;
            }

            // Enable commit button if fix is selected
            commitBtn.disabled = !selectedFix;

            // Update preview
            updatePreview(columnIndex);
        }

        // Update preview
        function updatePreview(columnIndex) {
            const fixSelect = document.getElementById(`fix-select-${columnIndex}`);
            const fixInput = document.getElementById(`fix-input-${columnIndex}`);
            const previewBody = document.getElementById(`preview-body-${columnIndex}`);

            const selectedFix = fixSelect.value;
            const customValue = fixInput.value;

            if (!selectedFix) {
                previewBody.innerHTML = '<tr><td colspan="2" style="text-align: center; color: #666;">Select a fix option to see preview</td></tr>';
                return;
            }

            // Validate custom input for prefix/suffix
            if ((selectedFix === 'prefix' || selectedFix === 'suffix') && !customValue.trim()) {
                previewBody.innerHTML = '<tr><td colspan="2" style="text-align: center; color: #666;">Enter custom text to see preview</td></tr>';
                return;
            }

            const problems = columnProblems[columnIndex];
            const sampleProblems = problems.slice(0, 100);

            previewBody.innerHTML = sampleProblems.map(problem => {
                const fixedValue = applyFix(problem.value, selectedFix, customValue);
                return `
                    <tr>
                        <td>${problem.rowIndex + 1}</td>
                        <td>${escapeHtml(fixedValue)}</td>
                    </tr>
                `;
            }).join('');
        }

        // Commit fix
        function commitFix(columnIndex) {
            const fixSelect = document.getElementById(`fix-select-${columnIndex}`);
            const fixInput = document.getElementById(`fix-input-${columnIndex}`);
            const card = document.getElementById(`column-card-${columnIndex}`);
            const statusElement = card.querySelector('.column-status');

            const selectedFix = fixSelect.value;
            const customValue = fixInput.value;

            // Validate
            if (!selectedFix) return;
            if ((selectedFix === 'prefix' || selectedFix === 'suffix') && !customValue.trim()) {
                alert('Please enter custom text for the selected fix option.');
                return;
            }

            // Store committed fix
            committedFixes[columnIndex] = {
                type: selectedFix,
                customValue: customValue
            };

            // Update UI
            if (selectedFix === 'unchanged') {
                card.className = 'column-card committed-unchanged';
                statusElement.className = 'column-status status-committed-unchanged';
                statusElement.textContent = 'Unchanged';
            } else {
                card.className = 'column-card committed-fix';
                statusElement.className = 'column-status status-committed-fix';
                statusElement.textContent = 'Fix Committed';
            }

            // Disable controls
            fixSelect.disabled = true;
            fixInput.disabled = true;
            document.getElementById(`commit-btn-${columnIndex}`).disabled = true;

            updateButtonStates();
        }

        // Update button states
        function updateButtonStates() {
            const totalFlagged = Object.keys(flaggedColumns).length;
            const totalCommitted = Object.keys(committedFixes).length;

            saveBtn.disabled = totalFlagged === 0 || totalCommitted < totalFlagged;
            resetBtn.disabled = totalCommitted === 0;
        }

        // Reset all fixes
        function resetAllFixes() {
            if (!confirm('Are you sure you want to reset all fixes? This will clear all committed changes.')) {
                return;
            }

            committedFixes = {};

            // Reset all column cards
            Object.keys(flaggedColumns).forEach(colIndex => {
                const card = document.getElementById(`column-card-${colIndex}`);
                const fixSelect = document.getElementById(`fix-select-${colIndex}`);
                const fixInput = document.getElementById(`fix-input-${colIndex}`);
                const commitBtn = document.getElementById(`commit-btn-${colIndex}`);
                const statusElement = card.querySelector('.column-status');

                // Reset card appearance
                card.className = 'column-card';
                statusElement.className = 'column-status status-pending';
                statusElement.textContent = 'Pending Fix';

                // Reset controls
                fixSelect.value = '';
                fixSelect.disabled = false;
                fixInput.value = '';
                fixInput.disabled = false;
                fixInput.classList.add('hidden');
                commitBtn.disabled = true;

                // Reset preview
                const previewBody = document.getElementById(`preview-body-${colIndex}`);
                previewBody.innerHTML = '<tr><td colspan="2" style="text-align: center; color: #666;">Select a fix option to see preview</td></tr>';
            });

            updateButtonStates();
            logArea.textContent += '\n\nAll fixes have been reset.';
        }

        // Save cleaned CSV
        function saveCleanedCSV() {
            try {
                logArea.textContent += '\n\nApplying fixes and generating cleaned CSV...';

                // Create cleaned data
                const cleanedData = originalData.map((row, rowIndex) => {
                    return row.map((cell, colIndex) => {
                        if (committedFixes[colIndex]) {
                            const fix = committedFixes[colIndex];
                            return applyFix(cell, fix.type, fix.customValue);
                        }
                        return cell;
                    });
                });

                // Convert to CSV string
                const csvContent = cleanedData.map(row => {
                    return row.map(cell => {
                        const str = String(cell);
                        // Escape quotes and wrap in quotes if necessary
                        if (str.includes(',') || str.includes('"') || str.includes('\n') || str.includes('\r')) {
                            return '"' + str.replace(/"/g, '""') + '"';
                        }
                        return str;
                    }).join(',');
                }).join('\n');

                // Add UTF-8 BOM for Excel compatibility
                const BOM = '\uFEFF';
                const finalContent = BOM + csvContent;

                // Create and download file
                const blob = new Blob([finalContent], { type: 'text/csv;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = 'cleaned_data.csv';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);

                logArea.textContent += '\nCleaned CSV file has been saved successfully!';

            } catch (error) {
                logArea.textContent += `\nError saving file: ${error.message}`;
                console.error('Save error:', error);
            }
        }

        // Utility function to escape HTML
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>
