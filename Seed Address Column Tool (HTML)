<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seed Address Column Tool</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #f5f5f5;
            padding: 20px;
            line-height: 1.6;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 30px;
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
        }

        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1em;
        }

        .section {
            margin-bottom: 25px;
            padding: 20px;
            border: 2px dashed #ddd;
            border-radius: 8px;
            background-color: #fafafa;
        }

        .section h2 {
            color: #444;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .file-input-wrapper {
            position: relative;
            display: inline-block;
            cursor: pointer;
            width: 100%;
        }

        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-input-button {
            display: block;
            padding: 15px 25px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            width: 100%;
        }

        .file-input-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .file-info {
            margin-top: 15px;
            padding: 10px;
            background: #e8f5e8;
            border-radius: 4px;
            border-left: 4px solid #4caf50;
        }

        .input-group {
            margin-bottom: 20px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .input-group input, .input-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .input-group input:focus, .input-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .button-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 120px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
            transform: translateY(-2px);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .alert {
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            border-left: 4px solid;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border-left-color: #dc3545;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border-left-color: #28a745;
        }

        .alert-warning {
            background: #fff3cd;
            color: #856404;
            border-left-color: #ffc107;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border-left-color: #17a2b8;
        }

        .hidden {
            display: none;
        }

        .checkbox-group {
            margin: 15px 0;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 8px;
            transform: scale(1.2);
        }

        .checkbox-group label {
            display: flex;
            align-items: center;
            cursor: pointer;
            font-weight: normal;
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: #e9ecef;
            border-radius: 3px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            width: 0%;
            transition: width 0.3s ease;
        }

        @media (max-width: 600px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            .btn {
                flex: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üè∑Ô∏è Seed Address Column Tool</h1>
        <p class="subtitle">Offline CSV Seed Address Column Injector</p>

        <div id="alerts"></div>

        <!-- File Upload Section -->
        <div class="section">
            <h2>üìÅ Upload CSV File</h2>
            <div class="file-input-wrapper">
                <input type="file" id="csvFile" class="file-input" accept=".csv" />
                <div class="file-input-button">
                    Choose CSV File
                </div>
            </div>
            <div id="fileInfo" class="file-info hidden">
                <strong>File:</strong> <span id="fileName"></span><br>
                <strong>Size:</strong> <span id="fileSize"></span><br>
                <strong>Detected Seed:</strong> <span id="detectedWallet"></span>
            </div>
        </div>

        <!-- Configuration Section -->
        <div id="configSection" class="section hidden">
            <h2>‚öôÔ∏è Configuration</h2>
            
            <div class="input-group">
                <label for="walletAddress">Seed (Wallet Address, Person, or Organization):</label>
                <input type="text" id="walletAddress" placeholder="Enter Seed identifier (e.g., 0xABCD1234, John Doe, Acme Corp)" />
            </div>

            <div class="input-group">
                <label for="columnName">Column Name:</label>
                <input type="text" id="columnName" value="Seed" placeholder="Enter column name" />
            </div>

            <div class="input-group">
                <label for="columnPosition">Column Position:</label>
                <select id="columnPosition">
                    <option value="left">Leftmost (First Column)</option>
                    <option value="right">Rightmost (Last Column)</option>
                </select>
            </div>

            <div class="checkbox-group">
                <label>
                    <input type="checkbox" id="overwriteExisting" />
                    Overwrite existing column if it exists
                </label>
            </div>
        </div>

        <!-- Processing Section -->
        <div id="processSection" class="section hidden">
            <h2>üîÑ Process File</h2>
            <div class="progress-bar">
                <div id="progressFill" class="progress-fill"></div>
            </div>
            <div class="button-group">
                <button id="processBtn" class="btn btn-primary">Process CSV</button>
                <button id="downloadBtn" class="btn btn-success hidden">Download Modified CSV</button>
            </div>
        </div>
    </div>

    <script>
        class SeedAddressColumnTool {
            constructor() {
                this.csvData = null;
                this.processedData = null;
                this.originalFileName = '';
                this.initializeEventListeners();
            }

            initializeEventListeners() {
                document.getElementById('csvFile').addEventListener('change', (e) => this.handleFileUpload(e));
                document.getElementById('processBtn').addEventListener('click', () => this.processCSV());
                document.getElementById('downloadBtn').addEventListener('click', () => this.downloadCSV());
                document.getElementById('walletAddress').addEventListener('input', () => this.validateWalletAddress());
            }

            showAlert(message, type = 'info') {
                const alertsContainer = document.getElementById('alerts');
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type}`;
                alertDiv.textContent = message;
                
                alertsContainer.innerHTML = '';
                alertsContainer.appendChild(alertDiv);
                
                // Auto-hide after 5 seconds for non-error messages
                if (type !== 'error') {
                    setTimeout(() => {
                        if (alertDiv.parentNode) {
                            alertDiv.parentNode.removeChild(alertDiv);
                        }
                    }, 5000);
                }
            }

            extractWalletFromFilename(filename) {
                // Simply return the filename without extension
                return filename.replace(/\.[^/.]+$/, '');
            }

            validateWalletAddress() {
                const walletInput = document.getElementById('walletAddress');
                const seed = walletInput.value.trim();
                
                if (!seed) return false;

                // Since seed can be wallet address, person, or organization, 
                // we just validate that it's not empty
                walletInput.style.borderColor = '#28a745';
                return true;
            }

            async handleFileUpload(event) {
                const file = event.target.files[0];
                if (!file) return;

                if (!file.name.toLowerCase().endsWith('.csv')) {
                    this.showAlert('Please select a CSV file.', 'error');
                    return;
                }

                this.originalFileName = file.name;
                
                try {
                    const content = await this.readFileContent(file);
                    this.csvData = this.parseCSV(content);
                    
                    // Extract wallet from filename
                    const detectedWallet = this.extractWalletFromFilename(file.name);
                    
                    // Update UI
                    document.getElementById('fileName').textContent = file.name;
                    document.getElementById('fileSize').textContent = this.formatFileSize(file.size);
                    document.getElementById('detectedWallet').textContent = detectedWallet || 'None';
                    document.getElementById('walletAddress').value = detectedWallet || '';
                    
                    document.getElementById('fileInfo').classList.remove('hidden');
                    document.getElementById('configSection').classList.remove('hidden');
                    document.getElementById('processSection').classList.remove('hidden');
                    
                    // Check if seed column already exists
                    const columnName = document.getElementById('columnName').value || 'Seed';
                    const hasExistingColumn = this.csvData.length > 0 && this.csvData[0].includes(columnName);
                    
                    if (hasExistingColumn) {
                        this.showAlert(`Column "${columnName}" already exists in the CSV. Check "Overwrite existing column" to replace it.`, 'warning');
                        document.getElementById('overwriteExisting').checked = true;
                    }
                    
                    this.showAlert(`CSV file loaded successfully! Found ${this.csvData.length - 1} data rows.`, 'success');
                    
                } catch (error) {
                    this.showAlert(`Error reading file: ${error.message}`, 'error');
                }
            }

            readFileContent(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = (e) => resolve(e.target.result);
                    reader.onerror = (e) => reject(new Error('Failed to read file'));
                    reader.readAsText(file);
                });
            }

            parseCSV(content) {
                const lines = content.split('\n').map(line => line.trim()).filter(line => line);
                const rows = [];
                
                for (const line of lines) {
                    const row = this.parseCSVRow(line);
                    if (row.length > 0) {
                        rows.push(row);
                    }
                }
                
                return rows;
            }

            parseCSVRow(line) {
                const result = [];
                let current = '';
                let inQuotes = false;
                let i = 0;
                
                while (i < line.length) {
                    const char = line[i];
                    
                    if (char === '"') {
                        if (inQuotes && line[i + 1] === '"') {
                            // Escaped quote
                            current += '"';
                            i += 2;
                        } else {
                            // Toggle quote state
                            inQuotes = !inQuotes;
                            i++;
                        }
                    } else if (char === ',' && !inQuotes) {
                        // End of field
                        result.push(current);
                        current = '';
                        i++;
                    } else {
                        current += char;
                        i++;
                    }
                }
                
                // Add the last field
                result.push(current);
                
                return result;
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            async processCSV() {
                if (!this.csvData || this.csvData.length === 0) {
                    this.showAlert('No CSV data loaded.', 'error');
                    return;
                }

                const walletAddress = document.getElementById('walletAddress').value.trim();
                const columnName = document.getElementById('columnName').value.trim() || 'Seed';
                const columnPosition = document.getElementById('columnPosition').value;
                const overwriteExisting = document.getElementById('overwriteExisting').checked;

                if (!walletAddress) {
                    this.showAlert('Please enter a wallet address.', 'error');
                    return;
                }

                if (!this.validateWalletAddress()) {
                    this.showAlert('Please enter a valid wallet address.', 'error');
                    return;
                }

                try {
                    // Show progress
                    this.updateProgress(25);
                    
                    // Process the data
                    const processedData = [...this.csvData];
                    
                    // Check if column already exists
                    const headers = processedData[0];
                    const existingColumnIndex = headers.findIndex(header => header.toLowerCase() === columnName.toLowerCase());
                    
                    if (existingColumnIndex !== -1) {
                        if (!overwriteExisting) {
                            this.showAlert(`Column "${columnName}" already exists. Please check "Overwrite existing column" or choose a different name.`, 'error');
                            this.updateProgress(0);
                            return;
                        }
                        
                        // Overwrite existing column
                        for (let i = 1; i < processedData.length; i++) {
                            processedData[i][existingColumnIndex] = walletAddress;
                        }
                    } else {
                        // Add new column
                        if (columnPosition === 'left') {
                            // Add to the beginning
                            for (let i = 0; i < processedData.length; i++) {
                                if (i === 0) {
                                    processedData[i].unshift(columnName);
                                } else {
                                    processedData[i].unshift(walletAddress);
                                }
                            }
                        } else {
                            // Add to the end
                            for (let i = 0; i < processedData.length; i++) {
                                if (i === 0) {
                                    processedData[i].push(columnName);
                                } else {
                                    processedData[i].push(walletAddress);
                                }
                            }
                        }
                    }
                    
                    this.updateProgress(75);
                    
                    // Store processed data
                    this.processedData = processedData;
                    
                    this.updateProgress(100);
                    
                    // Show success message and enable download
                    this.showAlert('CSV processed successfully! Ready for download.', 'success');
                    document.getElementById('downloadBtn').classList.remove('hidden');
                    
                } catch (error) {
                    this.showAlert(`Error processing CSV: ${error.message}`, 'error');
                    this.updateProgress(0);
                }
            }

            updateProgress(percentage) {
                document.getElementById('progressFill').style.width = percentage + '%';
            }

            generateCSVContent(data) {
                return data.map(row => {
                    return row.map(cell => {
                        // Escape quotes and wrap in quotes if necessary
                        const stringCell = String(cell);
                        if (stringCell.includes(',') || stringCell.includes('"') || stringCell.includes('\n')) {
                            return '"' + stringCell.replace(/"/g, '""') + '"';
                        }
                        return stringCell;
                    }).join(',');
                }).join('\n');
            }

            downloadCSV() {
                if (!this.processedData) {
                    this.showAlert('No processed data available for download.', 'error');
                    return;
                }

                try {
                    const csvContent = this.generateCSVContent(this.processedData);
                    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                    
                    // Generate filename
                    const originalName = this.originalFileName.replace(/\.csv$/i, '');
                    const newFileName = `with-seed-${originalName}.csv`;
                    
                    // Create download link
                    const link = document.createElement('a');
                    const url = URL.createObjectURL(blob);
                    link.setAttribute('href', url);
                    link.setAttribute('download', newFileName);
                    link.style.visibility = 'hidden';
                    
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    
                    // Clean up object URL
                    URL.revokeObjectURL(url);
                    
                    this.showAlert(`File downloaded as "${newFileName}"`, 'success');
                    
                } catch (error) {
                    this.showAlert(`Error downloading file: ${error.message}`, 'error');
                }
            }
        }

        // Initialize the tool when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new SeedAddressColumnTool();
        });
    </script>
</body>
</html>
